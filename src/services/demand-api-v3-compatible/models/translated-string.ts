// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const translatedString: any = z.lazy(() => {
  return z.object({
    translations: z.any().optional(),
  });
});

/**
 * Translated description of this room. The maximum number of characters returned may be limited by contract.
 * @typedef  {TranslatedString} translatedString - Translated description of this room. The maximum number of characters returned may be limited by contract. - Translated description of this room. The maximum number of characters returned may be limited by contract.
 * @property {any}
 */
export type TranslatedString = z.infer<typeof translatedString>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const translatedStringResponse: any = z.lazy(() => {
  return z
    .object({
      translations: z.any().optional(),
    })
    .transform((data) => ({
      translations: data['translations'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const translatedStringRequest: any = z.lazy(() => {
  return z.object({ translations: z.any().nullish() }).transform((data) => ({
    translations: data['translations'],
  }));
});
