// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { meals } from './meals';
import { plan } from './plan';

/**
 * The shape of the model inside the application code - what the users use
 */
export const mealPlanDto: any = z.lazy(() => {
  return z.object({
    meals: z.array(meals).optional(),
    plan: plan.optional(),
  });
});

/**
 * The meal plan policy for this product.
 * @typedef  {MealPlanDto} mealPlanDto - The meal plan policy for this product. - The meal plan policy for this product.
 * @property {Meals[]} - The meals included in the meal plan.
 * @property {Plan} - The meal plan included in this product.
 */
export type MealPlanDto = z.infer<typeof mealPlanDto>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const mealPlanDtoResponse: any = z.lazy(() => {
  return z
    .object({
      meals: z.array(meals).optional(),
      plan: plan.optional(),
    })
    .transform((data) => ({
      meals: data['meals'],
      plan: data['plan'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const mealPlanDtoRequest: any = z.lazy(() => {
  return z.object({ meals: z.array(meals).nullish(), plan: plan.nullish() }).transform((data) => ({
    meals: data['meals'],
    plan: data['plan'],
  }));
});
